/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/jalaali-js/index.js":
/*!******************************************!*\
  !*** ./node_modules/jalaali-js/index.js ***!
  \******************************************/
/***/ ((module) => {

eval("/*\n  Expose functions.\n*/\nmodule.exports =\n  { toJalaali: toJalaali\n  , toGregorian: toGregorian\n  , isValidJalaaliDate: isValidJalaaliDate\n  , isLeapJalaaliYear: isLeapJalaaliYear\n  , jalaaliMonthLength: jalaaliMonthLength\n  , jalCal: jalCal\n  , j2d: j2d\n  , d2j: d2j\n  , g2d: g2d\n  , d2g: d2g\n  , jalaaliToDateObject: jalaaliToDateObject\n  , jalaaliWeek: jalaaliWeek\n  }\n\n/*\n  Jalaali years starting the 33-year rule.\n*/\nvar breaks =  [ -61, 9, 38, 199, 426, 686, 756, 818, 1111, 1181, 1210\n  , 1635, 2060, 2097, 2192, 2262, 2324, 2394, 2456, 3178\n  ]\n\n/*\n  Converts a Gregorian date to Jalaali.\n*/\nfunction toJalaali(gy, gm, gd) {\n  if (Object.prototype.toString.call(gy) === '[object Date]') {\n    gd = gy.getDate()\n    gm = gy.getMonth() + 1\n    gy = gy.getFullYear()\n  }\n  return d2j(g2d(gy, gm, gd))\n}\n\n/*\n  Converts a Jalaali date to Gregorian.\n*/\nfunction toGregorian(jy, jm, jd) {\n  return d2g(j2d(jy, jm, jd))\n}\n\n/*\n  Checks whether a Jalaali date is valid or not.\n*/\nfunction isValidJalaaliDate(jy, jm, jd) {\n  return  jy >= -61 && jy <= 3177 &&\n          jm >= 1 && jm <= 12 &&\n          jd >= 1 && jd <= jalaaliMonthLength(jy, jm)\n}\n\n/*\n  Is this a leap year or not?\n*/\nfunction isLeapJalaaliYear(jy) {\n  return jalCalLeap(jy) === 0\n}\n\n/*\n  Number of days in a given month in a Jalaali year.\n*/\nfunction jalaaliMonthLength(jy, jm) {\n  if (jm <= 6) return 31\n  if (jm <= 11) return 30\n  if (isLeapJalaaliYear(jy)) return 30\n  return 29\n}\n\n/*\n    This function determines if the Jalaali (Persian) year is\n    leap (366-day long) or is the common year (365 days)\n\n    @param jy Jalaali calendar year (-61 to 3177)\n    @returns number of years since the last leap year (0 to 4)\n */\nfunction jalCalLeap(jy) {\n  var bl = breaks.length\n    , jp = breaks[0]\n    , jm\n    , jump\n    , leap\n    , n\n    , i\n\n  if (jy < jp || jy >= breaks[bl - 1])\n    throw new Error('Invalid Jalaali year ' + jy)\n\n  for (i = 1; i < bl; i += 1) {\n    jm = breaks[i]\n    jump = jm - jp\n    if (jy < jm)\n      break\n    jp = jm\n  }\n  n = jy - jp\n\n  if (jump - n < 6)\n    n = n - jump + div(jump + 4, 33) * 33\n  leap = mod(mod(n + 1, 33) - 1, 4)\n  if (leap === -1) {\n    leap = 4\n  }\n\n  return leap\n}\n\n/*\n  This function determines if the Jalaali (Persian) year is\n  leap (366-day long) or is the common year (365 days), and\n  finds the day in March (Gregorian calendar) of the first\n  day of the Jalaali year (jy).\n\n  @param jy Jalaali calendar year (-61 to 3177)\n  @param withoutLeap when don't need leap (true or false) default is false\n  @return\n    leap: number of years since the last leap year (0 to 4)\n    gy: Gregorian year of the beginning of Jalaali year\n    march: the March day of Farvardin the 1st (1st day of jy)\n  @see: http://www.astro.uni.torun.pl/~kb/Papers/EMP/PersianC-EMP.htm\n  @see: http://www.fourmilab.ch/documents/calendar/\n*/\nfunction jalCal(jy, withoutLeap) {\n  var bl = breaks.length\n    , gy = jy + 621\n    , leapJ = -14\n    , jp = breaks[0]\n    , jm\n    , jump\n    , leap\n    , leapG\n    , march\n    , n\n    , i\n\n  if (jy < jp || jy >= breaks[bl - 1])\n    throw new Error('Invalid Jalaali year ' + jy)\n\n  // Find the limiting years for the Jalaali year jy.\n  for (i = 1; i < bl; i += 1) {\n    jm = breaks[i]\n    jump = jm - jp\n    if (jy < jm)\n      break\n    leapJ = leapJ + div(jump, 33) * 8 + div(mod(jump, 33), 4)\n    jp = jm\n  }\n  n = jy - jp\n\n  // Find the number of leap years from AD 621 to the beginning\n  // of the current Jalaali year in the Persian calendar.\n  leapJ = leapJ + div(n, 33) * 8 + div(mod(n, 33) + 3, 4)\n  if (mod(jump, 33) === 4 && jump - n === 4)\n    leapJ += 1\n\n  // And the same in the Gregorian calendar (until the year gy).\n  leapG = div(gy, 4) - div((div(gy, 100) + 1) * 3, 4) - 150\n\n  // Determine the Gregorian date of Farvardin the 1st.\n  march = 20 + leapJ - leapG\n\n  // return with gy and march when we don't need leap\n  if (withoutLeap) return { gy: gy, march: march };\n\n\n  // Find how many years have passed since the last leap year.\n  if (jump - n < 6)\n    n = n - jump + div(jump + 4, 33) * 33\n  leap = mod(mod(n + 1, 33) - 1, 4)\n  if (leap === -1) {\n    leap = 4\n  }\n\n  return  { leap: leap\n          , gy: gy\n          , march: march\n          }\n}\n\n/*\n  Converts a date of the Jalaali calendar to the Julian Day number.\n\n  @param jy Jalaali year (1 to 3100)\n  @param jm Jalaali month (1 to 12)\n  @param jd Jalaali day (1 to 29/31)\n  @return Julian Day number\n*/\nfunction j2d(jy, jm, jd) {\n  var r = jalCal(jy, true)\n  return g2d(r.gy, 3, r.march) + (jm - 1) * 31 - div(jm, 7) * (jm - 7) + jd - 1\n}\n\n/*\n  Converts the Julian Day number to a date in the Jalaali calendar.\n\n  @param jdn Julian Day number\n  @return\n    jy: Jalaali year (1 to 3100)\n    jm: Jalaali month (1 to 12)\n    jd: Jalaali day (1 to 29/31)\n*/\nfunction d2j(jdn) {\n  var gy = d2g(jdn).gy // Calculate Gregorian year (gy).\n    , jy = gy - 621\n    , r = jalCal(jy, false)\n    , jdn1f = g2d(gy, 3, r.march)\n    , jd\n    , jm\n    , k\n\n  // Find number of days that passed since 1 Farvardin.\n  k = jdn - jdn1f\n  if (k >= 0) {\n    if (k <= 185) {\n      // The first 6 months.\n      jm = 1 + div(k, 31)\n      jd = mod(k, 31) + 1\n      return  { jy: jy\n              , jm: jm\n              , jd: jd\n              }\n    } else {\n      // The remaining months.\n      k -= 186\n    }\n  } else {\n    // Previous Jalaali year.\n    jy -= 1\n    k += 179\n    if (r.leap === 1)\n      k += 1\n  }\n  jm = 7 + div(k, 30)\n  jd = mod(k, 30) + 1\n  return  { jy: jy\n          , jm: jm\n          , jd: jd\n          }\n}\n\n/*\n  Calculates the Julian Day number from Gregorian or Julian\n  calendar dates. This integer number corresponds to the noon of\n  the date (i.e. 12 hours of Universal Time).\n  The procedure was tested to be good since 1 March, -100100 (of both\n  calendars) up to a few million years into the future.\n\n  @param gy Calendar year (years BC numbered 0, -1, -2, ...)\n  @param gm Calendar month (1 to 12)\n  @param gd Calendar day of the month (1 to 28/29/30/31)\n  @return Julian Day number\n*/\nfunction g2d(gy, gm, gd) {\n  var d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4)\n      + div(153 * mod(gm + 9, 12) + 2, 5)\n      + gd - 34840408\n  d = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752\n  return d\n}\n\n/*\n  Calculates Gregorian and Julian calendar dates from the Julian Day number\n  (jdn) for the period since jdn=-34839655 (i.e. the year -100100 of both\n  calendars) to some millions years ahead of the present.\n\n  @param jdn Julian Day number\n  @return\n    gy: Calendar year (years BC numbered 0, -1, -2, ...)\n    gm: Calendar month (1 to 12)\n    gd: Calendar day of the month M (1 to 28/29/30/31)\n*/\nfunction d2g(jdn) {\n  var j\n    , i\n    , gd\n    , gm\n    , gy\n  j = 4 * jdn + 139361631\n  j = j + div(div(4 * jdn + 183187720, 146097) * 3, 4) * 4 - 3908\n  i = div(mod(j, 1461), 4) * 5 + 308\n  gd = div(mod(i, 153), 5) + 1\n  gm = mod(div(i, 153), 12) + 1\n  gy = div(j, 1461) - 100100 + div(8 - gm, 6)\n  return  { gy: gy\n          , gm: gm\n          , gd: gd\n          }\n}\n\n/**\n * Return Saturday and Friday day of current week(week start in Saturday)\n * @param {number} jy jalaali year\n * @param {number} jm jalaali month\n * @param {number} jd jalaali day\n * @returns Saturday and Friday of current week\n */\nfunction jalaaliWeek(jy, jm, jd) {\n  var dayOfWeek = jalaaliToDateObject(jy, jm, jd).getDay();\n\n  var startDayDifference = dayOfWeek == 6 ? 0 : -(dayOfWeek+1);\n  var endDayDifference = 6+startDayDifference;\n\n  return {\n    saturday: d2j(j2d(jy, jm, jd+startDayDifference)),\n    friday: d2j(j2d(jy, jm, jd+endDayDifference))\n  }\n}\n\n/**\n * Convert Jalaali calendar dates to javascript Date object\n * @param {number} jy jalaali year\n * @param {number} jm jalaali month\n * @param {number} jd jalaali day\n * @param {number} [h] hours\n * @param {number} [m] minutes\n * @param {number} [s] seconds\n * @param {number} [ms] milliseconds\n * @returns Date object of the jalaali calendar dates\n */\nfunction jalaaliToDateObject(\n  jy,\n  jm,\n  jd,\n  h,\n  m,\n  s,\n  ms\n) {\n  var gregorianCalenderDate = toGregorian(jy, jm, jd);\n\n  return new Date(\n    gregorianCalenderDate.gy,\n    gregorianCalenderDate.gm - 1,\n    gregorianCalenderDate.gd,\n    h || 0,\n    m || 0,\n    s || 0,\n    ms || 0\n  );\n}\n\n/*\n  Utility helper functions.\n*/\n\nfunction div(a, b) {\n  return ~~(a / b)\n}\n\nfunction mod(a, b) {\n  return a - ~~(a / b) * b\n}\n\n\n//# sourceURL=webpack:///./node_modules/jalaali-js/index.js?");

/***/ }),

/***/ "./src/js/calendar.js":
/*!****************************!*\
  !*** ./src/js/calendar.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDateStringFromTimestamp: () => (/* binding */ getDateStringFromTimestamp),\n/* harmony export */   getJalaliFirstDay: () => (/* binding */ getJalaliFirstDay),\n/* harmony export */   getMonthStr: () => (/* binding */ getMonthStr),\n/* harmony export */   getNumberOfDays: () => (/* binding */ getNumberOfDays),\n/* harmony export */   initCalendar: () => (/* binding */ initCalendar),\n/* harmony export */   isSelectedDay: () => (/* binding */ isSelectedDay),\n/* harmony export */   selectOnClick: () => (/* binding */ selectOnClick),\n/* harmony export */   setDateToInput: () => (/* binding */ setDateToInput),\n/* harmony export */   setHeader: () => (/* binding */ setHeader),\n/* harmony export */   updateInput: () => (/* binding */ updateInput)\n/* harmony export */ });\n/* harmony import */ var _calendar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calendar */ \"./src/js/calendar.js\");\n/* harmony import */ var jalaali_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jalaali-js */ \"./node_modules/jalaali-js/index.js\");\n/* harmony import */ var jalaali_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jalaali_js__WEBPACK_IMPORTED_MODULE_1__);\n\r\n\r\n\r\nlet calendarType = \"jalali\";\r\n\r\nconst input = document.querySelector(\"#date\");\r\nconst calendar = document.querySelector(\"#calendar_main\"),\r\n  calHeaderTitle = document.querySelector(\"#calendar_header span\"),\r\n  calDays = document.querySelector(\"#cal_days\");\r\n\r\nlet months, days;\r\n\r\nconst Jalalimonths = [\r\n  \"فروردین\",\r\n  \"اردیبهشت\",\r\n  \"خرداد\",\r\n  \"تیر \",\r\n  \"مرداد\",\r\n  \"شهریور\",\r\n  \"مهر\",\r\n  \"آبان\",\r\n  \"آذر\",\r\n  \"دی\",\r\n  \"بهمن\",\r\n  \"اسفند\",\r\n];\r\n\r\nconst Jalalidays = [\r\n  \"شنبه\",\r\n  \"یکشنبه\",\r\n  \"دوشنبه\",\r\n  \"سه شنبه\",\r\n  \"چهار شنبه\",\r\n  \"پنج شنبه\",\r\n  \"جمعه\",\r\n];\r\n\r\nconst Georgianmonths = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\",\r\n];\r\n\r\nconst Georgiandays = [\r\n  \"Sunday\",\r\n  \"Monday\",\r\n  \"Tuesday\",\r\n  \"Wednesday\",\r\n  \"Thursday\",\r\n  \"Friday\",\r\n  \"Saturday\",\r\n];\r\n\r\nconst isSelectedDay = (day, cell, selectedDay) => {\r\n  if (day.timestamp === selectedDay) {\r\n    cell.classList.add(\"active\");\r\n    cell.classList.add(\"isSelected\");\r\n  }\r\n};\r\n\r\nconst selectOnClick = () => {\r\n  document.querySelectorAll(\".cell_wrapper\").forEach((cell) => {\r\n    cell.classList.contains(\"isSelected\") && cell.classList.remove(\"active\");\r\n\r\n    if (\r\n      cell.classList.contains(\"isCurrent\") &&\r\n      !cell.classList.contains(\"active\")\r\n    ) {\r\n      cell.querySelector(\"span\").classList.add(\"inactive_indicator\");\r\n    }\r\n  });\r\n};\r\n\r\nconst getDateStringFromTimestamp = (timestamp) => {\r\n  if (calendarType === \"jalali\") {\r\n    let dateObject = jalaali_js__WEBPACK_IMPORTED_MODULE_1___default().toJalaali(new Date(timestamp));\r\n\r\n    return `${months[dateObject.jm - 1]} ${dateObject.jd}, ${dateObject.jy}`;\r\n  } else {\r\n    let dateObject = new Date(timestamp); // Create Date object from timestamp\r\n\r\n    let year = dateObject.getFullYear();\r\n    let month = dateObject.getMonth(); // Get the month (0-indexed)\r\n    let day = dateObject.getDate();\r\n\r\n    return `${months[month]} ${day}, ${year}`;\r\n  }\r\n};\r\n\r\nconst setDateToInput = (timestamp, input) => {\r\n  let dateString = getDateStringFromTimestamp(timestamp);\r\n  input.value = dateString;\r\n  alert(input.value);\r\n};\r\n\r\nconst getNumberOfDays = (year, month) => {\r\n  const monthDays = [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29];\r\n\r\n  if (month === 11 && isLeapYear(year)) {\r\n    return 30;\r\n  }\r\n\r\n  return monthDays[month];\r\n};\r\n\r\nconst isLeapYear = (year) => {\r\n  return jalaali_js__WEBPACK_IMPORTED_MODULE_1___default().isLeapJalaaliYear(year);\r\n};\r\n\r\nconst isCurrentDay = (day, cell, today) => {\r\n  if (day.timestamp === today) {\r\n    cell.classList.add(\"active\");\r\n    cell.classList.add(\"isCurrent\");\r\n  }\r\n};\r\n\r\nconst getMonthStr = (month) =>\r\n  months[Math.max(Math.min(11, month), 0)] || \"Month\";\r\n\r\nconst getJalaliFirstDay = (year, month) => {\r\n  const { gy, gm, gd } = jalaali_js__WEBPACK_IMPORTED_MODULE_1___default().toGregorian(year, month + 1, 1);\r\n\r\n  const gregorianFirstDay = new Date(gy, gm - 1, gd).getDay();\r\n\r\n  const jalaliFirstDay = (gregorianFirstDay + 1) % 7;\r\n\r\n  return jalaliFirstDay;\r\n};\r\n\r\nconst setHeader = (year, month, el) => {\r\n  el.innerHTML = getMonthStr(month) + \" \" + year;\r\n};\r\n\r\nconst setHeaderNav = (offset, month, year, monthDetails) => {\r\n  month = month + offset;\r\n  if (month === -1) {\r\n    month = 11;\r\n    year--;\r\n  } else if (month === 12) {\r\n    month = 0;\r\n    year++;\r\n  }\r\n\r\n  if (calendarType === \"jalali\") {\r\n    monthDetails = getMonthDetails(year, month);\r\n  } else {\r\n    monthDetails = getMonthDetailsGregorian(year, month);\r\n  }\r\n\r\n  return {\r\n    year,\r\n    month,\r\n    monthDetails,\r\n  };\r\n};\r\n\r\nconst setCalBody = (monthDetails, today) => {\r\n  // Add dates to calendar\r\n  for (let i = 0; i < monthDetails.length; i++) {\r\n    let div = document.createElement(\"div\"),\r\n      span = document.createElement(\"span\");\r\n\r\n    div.classList.add(\"cell_wrapper\");\r\n    div.classList.add(\"cal_date\");\r\n\r\n    // Check if the current date is before today and disable it\r\n    if (monthDetails[i].timestamp < today) {\r\n      div.classList.add(\"disabled\");\r\n    } else {\r\n      monthDetails[i].month === 0\r\n        ? div.classList.add(\"current\")\r\n        : div.classList.add(\"hiddenz\");\r\n\r\n      monthDetails[i].month === 0 && isCurrentDay(monthDetails[i], div, today);\r\n    }\r\n\r\n    span.classList.add(\"cell_item\");\r\n\r\n    span.innerText = monthDetails[i].date;\r\n\r\n    div.appendChild(span);\r\n    calendar.appendChild(div);\r\n  }\r\n};\r\n// Re arrange dates according to arrow\r\n\r\nconst updateCalendar = (btn, month, year, monthDetails) => {\r\n  let newCal, offset;\r\n  if (btn.classList.contains(\"back\")) {\r\n    offset = -1;\r\n  } else if (btn.classList.contains(\"front\")) {\r\n    offset = 1;\r\n  }\r\n  newCal = setHeaderNav(offset, month, year, monthDetails);\r\n\r\n  setHeader(newCal.year, newCal.month, calHeaderTitle);\r\n  calendar.innerHTML = \"\";\r\n  setCalBody(newCal.monthDetails);\r\n\r\n  return newCal;\r\n};\r\n\r\nconst getNumberOfDaysGregorian = (year, month) => {\r\n  return 40 - new Date(year, month, 40).getDate();\r\n};\r\n\r\nconst getMonthDetailsGregorian = (year, month) => {\r\n  let firstDay = new Date(year, month).getDay();\r\n  let numberOfDays = getNumberOfDaysGregorian(year, month);\r\n  let monthArray = [];\r\n  let rows = 5;\r\n  let currentDay = null;\r\n  let index = 0;\r\n  let cols = 7;\r\n\r\n  for (let row = 0; row < rows; row++) {\r\n    for (let col = 0; col < cols; col++) {\r\n      currentDay = getDayDetailsGregorian({\r\n        index,\r\n        numberOfDays,\r\n        firstDay,\r\n        year,\r\n        month,\r\n      });\r\n      monthArray.push(currentDay);\r\n      index++;\r\n    }\r\n  }\r\n  return monthArray;\r\n};\r\n\r\nconst getDayDetailsGregorian = (args) => {\r\n  let date = args.index - args.firstDay;\r\n  let day = args.index % 7;\r\n\r\n  let prevMonth = args.month - 1;\r\n  let prevYear = args.year;\r\n  if (prevMonth < 0) {\r\n    prevMonth = 11;\r\n    prevYear--;\r\n  }\r\n  let prevMonthNumberOfDays = getNumberOfDaysGregorian(prevYear, prevMonth);\r\n\r\n  let _date =\r\n    (date < 0 ? prevMonthNumberOfDays + date : date % args.numberOfDays) + 1;\r\n\r\n  let month = date < 0 ? -1 : date >= args.numberOfDays ? 1 : 0;\r\n  let timestamp = new Date(args.year, args.month, _date).getTime();\r\n\r\n  return {\r\n    date: _date,\r\n    day,\r\n    month,\r\n    timestamp,\r\n    dayString: days[day],\r\n  };\r\n};\r\n\r\nconst getMonthDetails = (year, month) => {\r\n  let firstDay = getJalaliFirstDay(year, month); // Correct first day for Jalali  let numberOfDays = getNumberOfDays(year, month);\r\n  let monthArray = [];\r\n  let numberOfDays = getNumberOfDays(year, month); // Number of days in Jalali month\r\n  let rows = 5;\r\n  let currentDay = null;\r\n  let index = 0;\r\n  let cols = firstDay >= 5 ? 8 : 7;\r\n\r\n  for (let row = 0; row < rows; row++) {\r\n    for (let col = 0; col < cols; col++) {\r\n      currentDay = getDayDetails({\r\n        index,\r\n        numberOfDays,\r\n        firstDay,\r\n        year,\r\n        month,\r\n      });\r\n      monthArray.push(currentDay);\r\n      index++;\r\n    }\r\n  }\r\n  return monthArray;\r\n};\r\n\r\nconst getDayDetails = (args) => {\r\n  let date = args.index - args.firstDay;\r\n  let day = args.index % 7;\r\n\r\n  day = (day + 1) % 7;\r\n\r\n  let prevMonth = args.month - 1;\r\n  let prevYear = args.year;\r\n  if (prevMonth < 0) {\r\n    prevMonth = 11;\r\n    prevYear--;\r\n  }\r\n  let prevMonthNumberOfDays = getNumberOfDays(prevYear, prevMonth);\r\n\r\n  let _date =\r\n    (date < 0 ? prevMonthNumberOfDays + date : date % args.numberOfDays) + 1;\r\n  let month = date < 0 ? -1 : date >= args.numberOfDays ? 1 : 0;\r\n\r\n  let gregorianDate = jalaali_js__WEBPACK_IMPORTED_MODULE_1___default().toGregorian(args.year, args.month + 1, _date);\r\n\r\n  let timestamp = new Date(\r\n    gregorianDate.gy,\r\n    gregorianDate.gm - 1,\r\n    gregorianDate.gd\r\n  ).getTime();\r\n\r\n  return {\r\n    date: _date,\r\n    day,\r\n    month,\r\n    timestamp,\r\n    dayString: days[day],\r\n  };\r\n};\r\n\r\nconst updateInput = (monthDetails, selectedDay, input) => {\r\n  let currentDay = document.querySelector(\".isCurrent\");\r\n\r\n  // Update input based on clicked cell\r\n  document.querySelectorAll(\".cell_wrapper\").forEach((cell) => {\r\n    if (cell.classList.contains(\"current\")) {\r\n      cell.addEventListener(\"click\", (e) => {\r\n        let cell_date = e.target.textContent;\r\n\r\n        // Remove active state from current day\r\n\r\n        for (let i = 0; i < monthDetails.length; i++) {\r\n          if (monthDetails[i].month === 0) {\r\n            if (monthDetails[i].date.toString().trim() === cell_date.trim()) {\r\n              selectedDay = monthDetails[i].timestamp;\r\n\r\n              _calendar__WEBPACK_IMPORTED_MODULE_0__.setDateToInput(selectedDay, input);\r\n\r\n              currentDay !== null && currentDay.classList.remove(\"active\");\r\n\r\n              selectOnClick();\r\n\r\n              cell\r\n                .querySelector(\"span\")\r\n                .classList.contains(\"inactive_indicator\") &&\r\n                cell\r\n                  .querySelector(\"span\")\r\n                  .classList.remove(\"inactive_indicator\");\r\n\r\n              isSelectedDay(monthDetails[i], cell, selectedDay);\r\n\r\n              // Remove inactive state if current day is clicked\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\nconst initCalendar = () => {\r\n  const prev = document.querySelectorAll(\".cell_wrapper\");\r\n  if (prev.length) {\r\n    prev.forEach((item) => item.remove());\r\n  }\r\n\r\n  let year, month, monthDetails, todayTimestamp;\r\n\r\n  let date = new Date();\r\n\r\n  if (calendarType === \"jalali\") {\r\n    months = Jalalimonths;\r\n    days = Jalalidays;\r\n    let todayJalali = jalaali_js__WEBPACK_IMPORTED_MODULE_1___default().toJalaali(new Date());\r\n\r\n    let gregorianDate = jalaali_js__WEBPACK_IMPORTED_MODULE_1___default().toGregorian(\r\n      todayJalali.jy,\r\n      todayJalali.jm,\r\n      todayJalali.jd\r\n    );\r\n\r\n    todayTimestamp = new Date(\r\n      gregorianDate.gy,\r\n      gregorianDate.gm - 1,\r\n      gregorianDate.gd\r\n    ).getTime();\r\n\r\n    let jalaliDate = jalaali_js__WEBPACK_IMPORTED_MODULE_1___default().toJalaali(date);\r\n\r\n    year = jalaliDate.jy;\r\n    month = jalaliDate.jm - 1;\r\n\r\n    monthDetails = getMonthDetails(year, month);\r\n  } else {\r\n    months = Georgianmonths;\r\n    days = Georgiandays;\r\n    year = date.getFullYear();\r\n    month = date.getMonth();\r\n    const day = date.getDate();\r\n\r\n    todayTimestamp = new Date(year, month, day).getTime();\r\n\r\n    monthDetails = getMonthDetailsGregorian(year, month);\r\n  }\r\n\r\n  let selectedDay = todayTimestamp;\r\n\r\n  document.querySelectorAll(\".cal-btn\").forEach((btn) => {\r\n    btn.addEventListener(\"click\", () => {\r\n      const newDate = updateCalendar(btn, month, year, monthDetails);\r\n      year = newDate.year;\r\n      month = newDate.month;\r\n      monthDetails = newDate.monthDetails;\r\n\r\n      updateInput(monthDetails, selectedDay, input);\r\n    });\r\n  });\r\n\r\n  setHeader(year, month, calHeaderTitle);\r\n\r\n  for (let i = 0; i < days.length; i++) {\r\n    let div = document.createElement(\"div\"),\r\n      span = document.createElement(\"span\");\r\n\r\n    div.classList.add(\"cell_wrapper\");\r\n    span.classList.add(\"cell_item\");\r\n\r\n    span.innerText = days[i].slice(0, 2);\r\n\r\n    div.appendChild(span);\r\n    calDays.appendChild(div);\r\n  }\r\n\r\n  setDateToInput(todayTimestamp, input);\r\n\r\n  setCalBody(monthDetails, todayTimestamp);\r\n\r\n  updateInput(monthDetails, selectedDay, input);\r\n};\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  const toggleBtn = document.querySelector(\"#change-calendar\");\r\n\r\n  toggleBtn.addEventListener(\"click\", () => {\r\n    calendarType = calendarType === \"jalali\" ? \"gregorian\" : \"jalali\";\r\n    document.documentElement.style.setProperty(\r\n      \"--font\",\r\n      calendarType === \"jalali\" ? \"Yekan\" : \"Inter\"\r\n    );\r\n\r\n    initCalendar();\r\n  });\r\n});\r\n\n\n//# sourceURL=webpack:///./src/js/calendar.js?");

/***/ }),

/***/ "./src/js/main.js":
/*!************************!*\
  !*** ./src/js/main.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _calendar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calendar */ \"./src/js/calendar.js\");\n\r\n\r\n(0,_calendar__WEBPACK_IMPORTED_MODULE_0__.initCalendar)();\r\n\n\n//# sourceURL=webpack:///./src/js/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/main.js");
/******/ 	
/******/ })()
;